;; Define the dialog :Ana
 
(in-package :dm)
 
(defvar *ana* nil)
 
;; Return the window, creating it the first time or when it's closed.
;; Use only this function if you need only one instance.
(defun ana ()
   (if (windowp *ana*) *ana* (setq *ana* (make-ana))))
 
;; Create an instance of the window.
;; Use this if you need more than one instance.
(defun make-ana (&key (parent (development-main-window *system*)) 
                 (window-interior (make-box 239 33 776 387)) 
                 (name :ana) (title "Analyse a musical object"))
;;;    (setq *loaded-but-uncreated-windows* 
;;;       (delete 'ana *loaded-but-uncreated-windows*))
   (let (window-0 window-1 window-2 window-3 window-4)
      (setq window-0 
         (open-dialog  
            (list 
               (make-instance 'static-text 
                  :name :static-text-22 
                  :title (delete #\Newline "Static Text 6") 
                  :value (delete #\Newline "Note list") 
                  :box (make-box 209 123 264 143) 
                  :tabstop nil 
                  :groupstart t 
                  :foreground-color blue 
                  :background-color t 
                  :font (make-font-ex :swiss :arial 15 nil) 
                  :tab-control nil)
               (make-instance 'static-text 
                  :name :static-text-21 
                  :title (delete #\Newline "Static Text 9") 
                  :value (delete #\Newline "Synth") 
                  :box (make-box 29 196 103 217) 
                  :tabstop nil 
                  :groupstart t 
                  :foreground-color blue 
                  :background-color t 
                  :font (make-font-ex :swiss :arial 15 nil) 
                  :tab-control nil)
               (make-instance 'static-text 
                  :name :static-text-20 
                  :title (delete #\Newline "Static Text 9") 
                  :value (delete #\Newline "Init. volume") 
                  :box (make-box 29 163 104 184) 
                  :tabstop nil 
                  :groupstart t 
                  :foreground-color blue 
                  :background-color t 
                  :font (make-font-ex :swiss :arial 15 nil) 
                  :tab-control nil)
               (make-instance 'static-text 
                  :name :static-text-19 
                  :title (delete #\Newline "Static Text 9") 
                  :value (delete #\Newline "MIDI chan") 
                  :box (make-box 29 131 103 152) 
                  :tabstop nil 
                  :groupstart t 
                  :foreground-color blue 
                  :background-color t 
                  :font (make-font-ex :swiss :arial 15 nil) 
                  :tab-control nil)
               (make-instance 'editable-text 
                  :name :txt-track-synth 
                  :title (delete #\Newline "Editable Text 3") 
                  :box (make-box 103 196 259 217) 
                  :tabstop t 
                  :groupstart t 
                  :background-color 
                  (make-rgb :red 192 :green 253 :blue 254) 
                  :font (make-font nil :courier 13 nil) 
                  :tab-control nil)
               (make-instance 'editable-text 
                  :name :txt-track-vol 
                  :title (delete #\Newline "Editable Text 3") 
                  :value (delete #\Newline "") 
                  :box (make-box 103 163 192 184) 
                  :tabstop t 
                  :groupstart t 
                  :background-color 
                  (make-rgb :red 192 :green 253 :blue 254) 
                  :font (make-font nil :courier 13 nil) 
                  :tab-control nil)
               (make-instance 'editable-text 
                  :name :txt-track-chan 
                  :title (delete #\Newline "Editable Text 3") 
                  :value (delete #\Newline "") 
                  :box (make-box 103 131 192 152) 
                  :tabstop t 
                  :groupstart t 
                  :background-color 
                  (make-rgb :red 192 :green 253 :blue 254) 
                  :font (make-font nil :courier 13 nil) 
                  :tab-control nil)
               (make-instance 'static-text 
                  :name :static-text-17 
                  :title (delete #\Newline "Static Text 6") 
                  :value (delete #\Newline "Track list") 
                  :box (make-box 237 53 300 73) 
                  :tabstop nil 
                  :groupstart t 
                  :foreground-color blue 
                  :background-color t 
                  :font (make-font-ex :swiss :arial 15 nil) 
                  :tab-control nil)
               (make-instance 'editable-text 
                  :name :txtnickname 
                  :title (delete #\Newline "Editable Text 2") 
                  :value (delete #\Newline "") 
                  :box (make-box 104 53 223 73) 
                  :tabstop t 
                  :groupstart t 
                  :background-color white 
                  :font (make-font nil :courier 13 nil) 
                  :tab-control nil)
               (make-instance 'static-text 
                  :name :static-text-6 
                  :title (delete #\Newline "Static Text 6") 
                  :value (delete #\Newline "Nickname") 
                  :box (make-box 29 53 103 73) 
                  :tabstop nil 
                  :groupstart t 
                  :foreground-color blue 
                  :background-color t 
                  :font (make-font-ex :swiss :arial 15 nil))
               (make-instance 'editable-text 
                  :name :txttrack 
                  :title (delete #\Newline "Editable Text 3") 
                  :value (delete #\Newline "") 
                  :box (make-box 104 99 192 120) 
                  :tabstop t 
                  :groupstart t 
                  :background-color 
                  (make-rgb :red 192 :green 253 :blue 254) 
                  :font (make-font nil :courier 13 nil))
               (make-instance 'static-text 
                  :name :static-text-9 
                  :title (delete #\Newline "Static Text 9") 
                  :value (delete #\Newline "Track type") 
                  :box (make-box 29 99 103 120) 
                  :tabstop nil 
                  :groupstart t 
                  :foreground-color blue 
                  :background-color t 
                  :font (make-font-ex :swiss :arial 15 nil))
               (make-instance 'editable-text 
                  :name :txtobject 
                  :title (delete #\Newline "Editable Text 2") 
                  :value 'score 
                  :box (make-box 103 16 222 36) 
                  :tabstop t 
                  :groupstart t 
                  :background-color white 
                  :font (make-font nil :courier 13 nil))
               (make-instance 'static-text 
                  :name :static-text-4 
                  :title (delete #\Newline "Static Text 4") 
                  :value (delete #\Newline "Filename") 
                  :box (make-box 232 16 295 36) 
                  :tabstop nil 
                  :groupstart t 
                  :foreground-color blue 
                  :background-color t 
                  :font (make-font-ex :swiss :arial 15 nil))
               (make-instance 'static-text 
                  :name :static-text-3 
                  :title (delete #\Newline "Static Text 3") 
                  :value (delete #\Newline "Object") 
                  :box (make-box 29 16 82 36) 
                  :tabstop nil 
                  :groupstart t 
                  :foreground-color blue 
                  :background-color t 
                  :font 
                  (make-font-ex :swiss :arial\ rounded\ mt\ bold 16 
                     '(:bold)))
               (make-instance 'editable-text 
                  :name :txtfilename 
                  :title (delete #\Newline "Editable Text 1") 
                  :value (delete #\Newline "") 
                  :box (make-box 301 16 535 36) 
                  :tabstop t 
                  :groupstart t 
                  :background-color white 
                  :font (make-font nil :courier 13 nil))
               (make-instance 'single-item-list 
                  :name :lsttrack 
                  :title (delete #\Newline "Single Item List 2") 
                  :box (make-box 301 53 535 107) 
                  :tabstop t 
                  :groupstart t 
                  :background-color 
                  (make-rgb :red 192 :green 253 :blue 254) 
                  :set-value-fn :call-to-set-segments 
                  :key 'give-me-track-name 
                  :font (make-font-ex nil :arial 13 nil))
               (make-instance 'static-text 
                  :name :static-text-10 
                  :title (delete #\Newline "Static Text 10") 
                  :value (delete #\Newline "Segments") 
                  :box (make-box 29 232 99 251) 
                  :tabstop nil 
                  :groupstart t 
                  :foreground-color blue 
                  :background-color t 
                  :font (make-font-ex :swiss :arial 15 nil))
               (make-instance 'single-item-list 
                  :name :lstsegment 
                  :title (delete #\Newline "Single Item List 3") 
                  :box (make-box 271 123 535 217) 
                  :tabstop t 
                  :groupstart t 
                  :background-color 
                  (make-rgb :red 255 :green 255 :blue 208) 
                  :set-value-fn :call-to-set-components 
                  :set-focus-fn 'true 
                  :key 'capitalize-object 
                  :font (make-font nil :arial 16 nil) 
                  :set-value-fn-lambda 
                  '(lambda (widget cl-user::new-value 
                           cl-user::old-value)
                     (cl-user::advice "chiamata")))
               (make-instance 'single-item-list 
                  :name :lstcomponent 
                  :title (delete #\Newline "Single Item List 4") 
                  :box (make-box 103 227 318 345) 
                  :tabstop t 
                  :groupstart t 
                  :background-color 
                  (make-rgb :red 255 :green 255 :blue 208) 
                  :key 'capitalize-object 
                  :font (make-font nil :arial 16 nil))
               (make-instance 'default-button 
                  :name :close-button 
                  :title 'Close
                 :box (make-box 448 321 530 345) 
                 :tabstop nil 
                 :groupstart nil 
                 :set-value-fn #'(lambda (widget new old)
                                   (close (parent widget)))
                 :font (make-font-ex :swiss :arial 13 nil)))
            'dialog parent 
            :name name 
            :title title 
            :font (make-font :swiss :system 16 '(:bold)) 
            :window-state :shrunk 
            :window-border :frame 
            :left-attachment nil 
            :top-attachment nil 
            :right-attachment nil 
            :bottom-attachment nil 
            :user-movable t 
            :user-resizable t 
            :user-closable t 
            :user-shrinkable t 
            :user-scrollable nil 
            :overlapped nil 
            :background-color light-gray 
            :pop-up-p nil 
            :window-interior window-interior))
;;;       (setf (window-editable-p window-0) t)
;;;       (setf (getf (stream-plist window-0) :path) 
;;;          (let* ((pathname (load-time-value *load-pathname*)))
;;;             (if 
;;;                (or (not (pathnamep pathname)) 
;;;                   (member (pathname-type pathname) *fsl-extensions* 
;;;                      :test #'string-equal))
;;;                "D:\\u\\andersf\\mac\\dm\\lib\\analyse.bil" 
;;;                (namestring pathname))))
;;;       (setf (getf (stream-plist window-0) :startup-state) nil)
;;;       (setf (getf (stream-plist window-0) :top-level-p) nil)
;;;       (setf (help-string window-0) (delete #\Newline nil))
;;;       (setf (getf (stream-plist window-0) :package) :dm)
;;;       (setf (getf (stream-plist window-0) :menu-bar) 
;;;          (let ((menu-bar (open-stream 'menu-bar aclwin:*screen* :io)))
;;;             (add-to-menu menu-bar 
;;;                (make-instance 'menu-item 
;;;                   :name :file-menu 
;;;                   :title "~File" 
;;;                   :value 
;;;                   (open-menu 
;;;                      (list 
;;;                         (make-instance 'menu-item 
;;;                            :name :open 
;;;                            :title "~Open" 
;;;                            :value 'te:open-text-file 
;;;                            :event-synonym '(control-key #\O) 
;;;                            :plist '(pc::id 16385))
;;;                         (make-instance 'menu-item 
;;;                            :title "-" 
;;;                            :value "-" 
;;;                            :available-p nil)
;;;                         (make-instance 'menu-item 
;;;                            :name :exit 
;;;                            :title "E~xit" 
;;;                            :value 'user-close-top-level-window 
;;;                            :event-synonym '(alt-key pc:vk-f4) 
;;;                            :plist '(pc::id 16386)))
;;;                      'pop-up-menu aclwin:*screen* 
;;;                      :name :default-menu 
;;;                      :selection-function 
;;;                      'funcall-menu-item-with-window)))
;;;             menu-bar)
;;;        (let* ((box (getf *window-exteriors* (object-name window-0))))
;;;           (when box (reshape-window-exterior window-0 box)))
      (show-window window-0 nil)
      window-0))
;(unless (windowp *ana*) (pushnew 'ana *loaded-but-uncreated-windows*))
