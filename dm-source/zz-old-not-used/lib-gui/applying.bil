;; Define the dialog :Applying
 
(in-package :dm)
 
(defvar *applying* nil)
 
;; Return the window, creating it the first time or when it's closed.
;; Use only this function if you need only one instance.
(defun applying ()
   (if (windowp *applying*) *applying* 
      (setq *applying* (make-applying))))
 
;; Create an instance of the window.
;; Use this if you need more than one instance.
(defun make-applying (&key (parent (development-main-window *system*)) 
                      (window-interior (make-box 212 80 532 354)) 
                      (name :applying) (title "Applying rules"))
   (setq *loaded-but-uncreated-windows* 
      (delete 'applying *loaded-but-uncreated-windows*))
   (let (window-0 window-1 window-2 window-3 window-4)
      (setq window-0 
         (open-dialog 
            (list 
               (make-instance 'static-text 
                  :name :static-text-12 
                  :title (delete #\Newline "Static Text 12") 
                  :value 
                  (delete #\Newline "Monitoring rule application") 
                  :box (make-box 3 6 316 28) 
                  :border :static 
                  :tabstop nil 
                  :groupstart t 
                  :foreground-color blue 
                  :background-color 
                  (make-rgb :red 128 :green 255 :blue 255) 
                  :justification :center 
                  :font (make-font-ex :swiss :arial 14 nil))
               (make-instance 'static-text 
                  :name :result-text 
                  :title (delete #\Newline "result-text") 
                  :value (delete #\Newline "\"\"") 
                  :box (make-box 3 34 316 269) 
                  :border :plain 
                  :tabstop nil 
                  :groupstart t 
                  :font (make-font-ex :swiss :arial 12 '(:normal))))
            'dialog parent 
            :name name 
            :title title 
            :font (make-font :swiss :system 16 '(:bold)) 
            :window-state :shrunk 
            :window-border :frame 
            :left-attachment nil 
            :top-attachment nil 
            :right-attachment nil 
            :bottom-attachment nil 
            :user-movable t 
            :user-resizable t 
            :user-closable t 
            :user-shrinkable t 
            :user-scrollable nil 
            :overlapped nil 
            :background-color light-gray 
            :pop-up-p nil 
            :window-interior window-interior))
      nil
      (show-window window-0 nil)
      window-0))
(unless (windowp *applying*) 
   (pushnew 'applying *loaded-but-uncreated-windows*))
